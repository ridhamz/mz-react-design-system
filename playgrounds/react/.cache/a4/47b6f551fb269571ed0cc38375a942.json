{"id":"../../../node_modules/@mz-ds/react/lib/molecules/Select/Select.js","dependencies":[{"name":"C:\\Users\\THINKPAD\\Desktop\\mz-react-design-system\\node_modules\\@mz-ds\\react\\lib\\molecules\\Select\\Select.js.map","includedInParent":true,"mtime":1666953287677},{"name":"C:\\Users\\THINKPAD\\Desktop\\mz-react-design-system\\playgrounds\\react\\package.json","includedInParent":true,"mtime":1666796246242},{"name":"C:\\Users\\THINKPAD\\Desktop\\mz-react-design-system\\node_modules\\@mz-ds\\react\\package.json","includedInParent":true,"mtime":1666983452369},{"name":"react","loc":{"line":1,"column":32,"index":32},"parent":"C:\\Users\\THINKPAD\\Desktop\\mz-react-design-system\\node_modules\\@mz-ds\\react\\lib\\molecules\\Select\\Select.js","resolved":"C:\\Users\\THINKPAD\\Desktop\\mz-react-design-system\\node_modules\\@mz-ds\\react\\node_modules\\react\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Select;\nvar _react = _interopRequireWildcard(require(\"react\"));\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction Select(options = [], label = 'Please select an option ...', onOptionSelected, renderOption) {\n  // const [isOpen, setIsOpen] = useState<boolean>(false);\n  // const [selectedIndex, setSelectedIndex] = useState<null | number>(null);\n  // const [highlightedIndex, setHighlightedIndex] = useState<null | number>(null);\n  // const labelRef = useRef<HTMLButtonElement>(null);\n  // const [optionRefs, setOptionRefs] = useState<\n  //   React.RefObject<HTMLLIElement>[]\n  // >([]);\n  (0, _react.useState)(0);\n  // const onOptionSelected = (option: SelectOption, optionIndex: number) => {\n  //   if (handler) {\n  //     handler(option, optionIndex);\n  //   }\n  //   setSelectedIndex(optionIndex);\n  //   setIsOpen(false);\n  // };\n  // const onLabelClick = () => {\n  //   setIsOpen(!isOpen);\n  // };\n  // useEffect(() => {\n  //   setOverlayTop((labelRef.current?.offsetHeight || 0) + 10);\n  // }, [labelRef.current?.offsetHeight]);\n  // let selectedOption = null;\n  // if (selectedIndex !== null) {\n  //   selectedOption = options[selectedIndex];\n  // }\n  // const highlightOption = (optionIndex: number | null) => {\n  //   setHighlightedIndex(optionIndex);\n  // };\n  // const onButtonKeyDown: KeyboardEventHandler = (event) => {\n  //   event.preventDefault();\n  //   if (\n  //     [KEY_CODES.ENTER, KEY_CODES.SPACE, KEY_CODES.DOWN_ARROW].includes(\n  //       event.keyCode\n  //     )\n  //   ) {\n  //     setIsOpen(true);\n  //     // set focus on the list item\n  //     highlightOption(0);\n  //   }\n  // };\n  // useEffect(() => {\n  //   setOptionRefs(options.map((_) => createRef<HTMLLIElement>()));\n  // }, [options.length]);\n  // useEffect(() => {\n  //   if (highlightedIndex !== null && isOpen) {\n  //     const ref = optionRefs[highlightedIndex];\n  //     if (ref && ref.current) {\n  //       ref.current.focus();\n  //     }\n  //   }\n  // }, [isOpen, highlightedIndex]);\n  // const onOptionKeyDown: KeyboardEventHandler = (event) => {\n  //   if (event.keyCode === KEY_CODES.ESC) {\n  //     setIsOpen(false);\n  //     return;\n  //   }\n  //   if (event.keyCode === KEY_CODES.DOWN_ARROW) {\n  //     highlightOption(getNextOptionIndex(highlightedIndex, options));\n  //   }\n  //   if (event.keyCode === KEY_CODES.UP_ARROW) {\n  //     highlightOption(getPreviousOptionIndex(highlightedIndex, options));\n  //   }\n  //   if (event.keyCode === KEY_CODES.ENTER) {\n  //     onOptionSelected(options[highlightedIndex!], highlightedIndex!);\n  //   }\n  // };\n  return _react.default.createElement(\"h1\", null, \"fllf\");\n  // return (\n  //   <div className=\"mz-select\">\n  //     <button\n  //       data-testid=\"mzSelectButton\"\n  //       onKeyDown={onButtonKeyDown}\n  //       aria-controls=\"mz-select-list\"\n  //       aria-haspopup={true}\n  //       aria-expanded={isOpen ? true : undefined}\n  //       ref={labelRef}\n  //       className=\"mz-select__label\"\n  //       onClick={() => onLabelClick()}\n  //     >\n  //       <Text>{selectedOption === null ? label : selectedOption.label}</Text>\n  //       <svg\n  //         className={`mz-select__caret ${\n  //           isOpen ? 'mz-select__caret--open' : 'mz-select__caret--closed'\n  //         }`}\n  //         width=\"1rem\"\n  //         height=\"1rem\"\n  //         fill=\"none\"\n  //         strokeLinecap=\"round\"\n  //         strokeLinejoin=\"round\"\n  //         strokeWidth={2}\n  //         viewBox=\"0 0 24 24\"\n  //         stroke=\"currentColor\"\n  //       >\n  //         <path d=\"M19 9l-7 7-7-7\" />\n  //       </svg>\n  //     </button>\n  //     {\n  //       <ul\n  //         role=\"menu\"\n  //         aria-hidden={isOpen ? undefined : false}\n  //         id=\"mz-select-list\"\n  //         style={{ top: overlayTop }}\n  //         className={`mz-select__overlay ${\n  //           isOpen ? 'mz-select__overlay--open' : ''\n  //         }`}\n  //       >\n  //         {options.map((option, optionIndex) => {\n  //           const isSelected = selectedIndex === optionIndex;\n  //           const isHighlighted = highlightedIndex === optionIndex;\n  //           const ref = optionRefs[optionIndex];\n  //           const renderOptionProps = {\n  //             ref,\n  //             option,\n  //             isSelected,\n  //             getOptionRecommendedProps: (overrideProps = {}) => {\n  //               return {\n  //                 ref,\n  //                 role: 'menuitemradio',\n  //                 'aria-label': option.label,\n  //                 'aria-checked': isSelected ? true : undefined,\n  //                 onKeyDown: onOptionKeyDown,\n  //                 tabIndex: isHighlighted ? -1 : 0,\n  //                 onMouseEnter: () => highlightOption(optionIndex),\n  //                 onMouseLeave: () => highlightOption(null),\n  //                 className: `mz-select__option\n  //                               ${\n  //                                 isSelected\n  //                                   ? 'mz-select__option--selected'\n  //                                   : ''\n  //                               }\n  //                               ${\n  //                                 isHighlighted\n  //                                   ? 'mz-select__option--highlighted'\n  //                                   : ''\n  //                               }\n  //                           `,\n  //                 key: option.value,\n  //                 onClick: () => onOptionSelected(option, optionIndex),\n  //                 ...overrideProps,\n  //               };\n  //             },\n  //           };\n  //           if (renderOption) {\n  //             return renderOption(renderOptionProps);\n  //           }\n  //           return (\n  //             <li {...renderOptionProps.getOptionRecommendedProps()}>\n  //               <Text>{option.label}</Text>\n  //               {isSelected ? (\n  //                 <svg\n  //                   width=\"1rem\"\n  //                   height=\"1rem\"\n  //                   fill=\"none\"\n  //                   strokeLinecap=\"round\"\n  //                   strokeLinejoin=\"round\"\n  //                   strokeWidth={2}\n  //                   viewBox=\"0 0 24 24\"\n  //                   stroke=\"currentColor\"\n  //                 >\n  //                   <path d=\"M5 13l4 4L19 7\" />\n  //                 </svg>\n  //               ) : null}\n  //             </li>\n  //           );\n  //         })}\n  //       </ul>\n  //     }\n  //   </div>\n  // );\n}"},"sourceMaps":{"js":{"mappings":[],"sources":{},"lineCount":null}},"error":null,"hash":"78af1739987361d46159074f3570474f","cacheData":{"env":{}}}